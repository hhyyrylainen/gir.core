using System;
using System.Linq;
using System.Text;
using Generator3.Converter;

namespace Generator3.Renderer.V2.Public;

public static partial class ClassPropertiesRenderer
{
    public static string Render(GirModel.Class cls)
    {
        return $@"
using System;
using GObject;
using System.Runtime.InteropServices;
#nullable enable
namespace { cls.Namespace.GetPublicName() }
{{
    // AUTOGENERATED FILE - DO NOT MODIFY

    public partial class { cls.Name }
    {{
        {cls.Properties
            .Select(x => Render(cls, x))
            .Join(Environment.NewLine)}
    }}
}}";
    }
    
    private static string Render(GirModel.Class cls, GirModel.Property property)
    {
        try
        {
            ThrowIfNotSupported(cls, property);

            var builder = new StringBuilder();
            builder.AppendLine(RenderDescriptor(cls, property));
            builder.AppendLine(RenderAccessor(cls, property));

            return builder.ToString();
        }
        catch (Exception ex)
        {
            var message = $"Did not generate property '{cls.Name}.{property.Name}': {ex.Message}";

            if (ex is NotImplementedException)
                Log.Debug(message);
            else
                Log.Warning(message);

            return string.Empty;
        }
    }
    
    private static void ThrowIfNotSupported(GirModel.Class cls, GirModel.Property property)
    {
        if (property.AnyType.Is<GirModel.PrimitiveType>())
            return;

        if (property.AnyType.IsArray<GirModel.String>())
            return;

        if (property.AnyType.IsArray<GirModel.Byte>())
            return;

        if (property.AnyType.Is<GirModel.Enumeration>())
            return;

        if (property.AnyType.Is<GirModel.Bitfield>())
            return;

        if (property.AnyType.Is<GirModel.Class>())
            return;

        if (property.AnyType.Is<GirModel.Interface>())
            return;

        if (property.AnyType.Is<GirModel.Record>())
            throw new NotImplementedException("There is currently no concept for transfering native records (structs) into the managed world.");

        throw new Exception($"Property {cls.Name}.{property.Name} is not supported");
    }
}
